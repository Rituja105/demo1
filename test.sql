section:1

create database company_db;
create table employees(employee_id int,
first_name varchar,
last_name varchar,
salary int,
hire_date date,
dept_id int
);
create table departments(dept_id int,
dept_name varchar 
);

1.DELETE
Removes specific rows from a table based on a condition.
Syntax delete from table_name where condition;
Points:
Deletes only the specified rows.
Triggers and foreign key constraints are respected.
if no where clause is specified, all rows will be deleted, but the table structure remains.

2. truncate
Removes all rows from a table but keeps the table structure.
Syntax: truncate table table_name;
Deletes all rows without logging individual row deletions.
Faster than delete because it does not generate individual row delete logs.
Does not activate triggers.

3. DROP
PCompletely removes a table 
Syntax: drop table table_name;
Deletes the table structure, indexes, constraints, and all data.
Cannot be rolled back.
The table must be recreated to store data again.


Numeric Data Types 
smallint
integer
bigint
decimal(p, s) 
numeric(p, s)
real
double precision
serial
bigserial

String Data Types
char(n)
varchar(n) 
text 

varchar
Variable-length string with a max limit n
Only uses storage for actual characters (up to n)

text
Variable-length string with no limit
Variable-length string with no limit

char
Fixed-length string of n characters
Always takes n bytes, padding with spaces if shorter

section 2
CREATE TABLE employees (
employee_id int,
first_name varchar,
last_name varchar,
salary int,
hire_date date,
dept_id int
);
insert into employees(employee_id,first_name,last_name,salary,hire_date,dept_id)values(1,'Samantha','Mcintyre',64063,'5/7/2016',8);

update employees set salary = salary * 1.10;
delete from employees where hire_date < '5/7/2016';
select * from employees where salary between 50000 and 80000;
select * from employees where first_name like 'J%';

1insert
When inserting a row, returning can return the newly added values, including autogenerated ones like SERIAL IDs.
Example: insert into employees (first_name, last_name, salary, hire_date, dept_id)values('John', 'Doe', 60000, '2024-03-10', 5)
returning employee_id, first_name, salary;

2.update
when updating records, returning helps retrieve modified values.
Example:update employees set salary = salary * 1.10 where dept_id = 5
returning employee_id, first_name, salary;

3.delect
When deleting records, returning shows which rows were removed.
Example:delete from employees where salary < 40000
returning employee_id, first_name, salary;


section.3
select * from employees order by salary desc;
Select * From employees orderR BY salary desc limit 3;
select sum(salary) as total_salary from employees;
Select dept_id, AVG(salary) as avg_salary from employees group by dept_id having Avg(salary) > 70000;


section.4
select first_name || ' ' || last_name as full_name from employees;
Select hire_date, extract(year from hire_date) from employees;
Select upper(first_name) from employees;
Select first_name,last_name,hire_date extract (year from AGE(hire_date)) from employees;
select first_name, last_name, hire_date, date_trunc('month',hire_date) FROM employees;


section.5
update employees set salary = coalesce(salary, 50000) where salary is null;
select employee_id, first_name, last_name, Greatest(salary, 50000) as highest_value, least(salary, 30000) as lowest_value from employees;

section.6
select e.employee_id, e.first_name, e.last_name, e.salary, e.dept_id,d.dept_name from employees e inner join departments d on e.dept_id = d.dept_id;
select e.employee_id, e.first_name, e.last_name, e.salary, e.dept_id,d.dept_name from employees e left join departments d on e.dept_id = d.dept_id;
select employee_id, first_name, last_name from employees
except
select employee_id, first_name, last_name from managers;

union
Removes duplicates 
Slower
When you need only unique records

union all
Includes duplicates
faster
when you need all records, including duplicates




